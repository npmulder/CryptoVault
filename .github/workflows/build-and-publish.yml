name: Build and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

env:
  image-name: ghcr.io/npmulder/cryptovault-api:${{ github.sha }}
  image-name-unit-tests: unit-tests:latest

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Unit tests [build]
      run: docker build --target unit-test -t ${{ env.image-name-unit-tests }} .

    - name: Unit tests [run]
      run: docker run --rm -v ${{ github.workspace }}/path/to/artifacts/testresults:/code/Tests/CryptoVault.Api.IntegrationTests/TestResults ${{ env.image-name-unit-tests }}
    
    - name: Unit tests [results]  
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: unit-test-results
        path: ${{ github.workspace }}/path/to/artifacts/testresults/test_results_unit_test.trx

    - name: Unit tests [publish]
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit tests
        path: ${{ github.workspace }}/path/to/artifacts/testresults/test_results_unit_test.trx
        reporter: dotnet-trx
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Code coverage [coveralls]  
      id: coveralls
      uses: coverallsapp/github-action@v1.1.2 
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }} 
        path-to-lcov: ${{ github.workspace }}/path/to/artifacts/testresults/coverage.info
    
    - name: Code coverage response [coveralls]
      run: echo "${{ steps.coveralls.outputs.coveralls-api-result }}"

    - name: Code coverage [codecov]
      uses: codecov/codecov-action@v1.2.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{ github.workspace }}/path/to/artifacts/testresults/coverage.info
        verbose: true
        fail_ci_if_error: true
      
    - name: Build docker image
      run: docker build . -t ${{ env.image-name }}
      
    - name: Scan docker image
      uses: azure/container-scan@v0
      with:
        image-name: ${{ env.image-name }}
        severity-threshold: MEDIUM
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GH_CR }}
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GH_CR }}
        
    - name: Push docker image
      run: docker push ${{ env.image-name }}
